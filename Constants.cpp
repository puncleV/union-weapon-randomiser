// Supported with union (c) 2020 Union team
// Union SOURCE file

#include<set>
namespace GOTHIC_ENGINE {
	auto const AIV_BOSS = 90;
	auto EXTRA_LOOT_BASE_CHANCE = 15;
	auto EXTRA_LOOT_HP_FACTOR_HORINIS = 400;
	auto EXTRA_LOOT_HP_FACTOR_OTHER = 700;
	auto EXTRA_LOOT_HP_FACTOR_MULTIPLIER = 25;
	auto EXTRA_LOOT_HORINIS_FACTOR = 1000;
	auto EXTRA_LOOT_OTHER_FACTOR = 1250;
	auto EXTRA_LOOT_CHEST_BASE_CHANCE = 450;
	auto BASE_STRENGTH_PER_LOOT_MULTIPLIER = 1;
	auto VALUE_STRENGTH_PER_LOOT_MULTIPLIER = 250;
	auto ENEMY_STATS_PER_MULTIPLIER = 25;
	auto ENEMY_DEFENCE_PER_MULTIPLIER = 3;
	auto ENEMY_HP_FACTOR = 150;
	auto CHANCE_TO_ADD_RANGED_WEAPON = 300;

	auto SHOULD_ADD_LOOT_TO_PLAYER = FALSE;
	auto SHOULD_IGNORE_CHECK_TO_ADD_LOOT = FALSE;
	auto SHOULD_ADD_LOOT_TO_NPC = FALSE;
	auto SHOULD_SHUFFLE_MELEE_WEAPON = FALSE;
	auto SHOULD_SHUFFLE_RANGED_WEAPON = FALSE;
	auto IS_DEBUG = FALSE;

	std::set<zSTRING> randomLootGiven;

	std::vector < zSTRING > defaultLoot = {
		"ITMI_GOLD", "ITMI_GOLD", "ITRW_EXPLOSIVEBOLT", "ITRW_ADDON_MAGICARROW", "ITFO_POTTAGE_MUSHROOM_BLACK", "ITPO_NP_MANAREG2", "ITFO_POTTAGE_MUSHROOM_BLACK", "ITFO_POTTAGE_MUSHROOM_BLACK",
		"ITFO_POTTAGE_MUSHROOM", "ITFO_COMPOTE_00", "ITFO_SCHILDKROETESOUP_SBORKA", "ITFO_SCHILDKROETESOUP_SBORKA", "ITFO_SCHILDKROETESOUP_SBORKA", "ITFO_WINE_GRITTA",
		"ITMI_ADDON_JOINT_01", "ITMI_JOINT_02", "ITMI_JOINT_03", "ITFO_SMELLYFISH", "ITFO_ADDON_RUM_SKIP", "ITPO_NP_STAMINA", "ITFOMUTTON_NICLAS",
		"ITFO_XPSTEW", "ITFO_CAKE_APPLE", "ITFO_CAKE_MEAT", "ITFO_CAKE_MUSHROOM", "ITFO_CAKE_FISH", "ITFO_CAKE_HONEY", "ITFO_HILDASTEW",
		"ITSC_FIREBOLT", "ITSC_ICEBOLT", "ITSC_LIGHT", "ITSC_ZAP", "ITSC_DEATHBOLT", "ITSC_SUMWOLF", "ITSC_SUMGOBSKEL"
	};

	zCArray<int> meleeWeaponsList;
	zCArray<int> rangedWeaponsList;

	int getExtraLootProbability(oCNpc* npc, oCWorld* world) {
		auto hpFactor = world->GetObjectName().HasWordI("NEWWORLD") ? EXTRA_LOOT_HP_FACTOR_HORINIS : EXTRA_LOOT_HP_FACTOR_OTHER;
		auto chance = EXTRA_LOOT_BASE_CHANCE + ((int)npc->attribute[NPC_ATR_HITPOINTSMAX] / hpFactor) * EXTRA_LOOT_HP_FACTOR_MULTIPLIER;

		return max(chance, 10);
	}
}